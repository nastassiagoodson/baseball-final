Baseball modeling
For our final project we modeled some of the main rules of baseball (pertaining to runners moving around the bases) as found here: 
https://content.mlb.com/documents/2/2/4/305750224/2019_Official_Baseball_Rules_FINAL_.pdf
Our goal was to incorporate as little of our prior understanding of baseball as possible into a very unconstrained model of players and bases interacting, and then confirm that applying the rules constrained possible plays into things that were obviously baseball. We succeed in creating a working model of baseball that can generate valid innings of play and not produce invalid instances. We demonstrated that overall, the rules of baseball don’t allow for any serious exploits, such as a run scoring without a player getting home, the hitting team somehow reducing the number of outs,  or an out occurring without a runner getting retired. We were also able to find areas where the high level rules we modeled allowed for some ambiguity, for instance in deciding whether runs scored in the sme play as the third out of an inning count or not. With this information, we can identify such an area of the rulebook as a place that should be investigated further for consistency. 
We chose to model a single inning of baseball, where an inning ends as soon as 3 or more outs are reached.  As such, we defined specific sigs for players, states, and bases, where each player contains a reference to their next player, and there were exactly nine players.  Each base has a reference to it’s next base, and there are exactly 4 bases, as in the real-life game.  Perhaps our most complicated sig is the State sig, which contains a relation to the number of outs, runs, the player currently at bat, the set of bases to players on base, and the set of players who are out.  As a result of these different relations, we could see, given an event, how the states of the game changed.  In terms of events, we defined 7 types of events that could happen: strike outs, hits, field outs, balks, walks, hit-by-pitches, and steals.  The most complicated portion of our code is the batter transition which dictates the transition between states based on the event.  For each type of event, we defined the relations that had to change in a certain way as well as relations that should remain the same in both the pre State and the post State of that event. Please see our commented code for more information on what each of our different constraints are.  Next, we needed to define several rules important to the game of baseball.  The first of these was the batting order (defined in the pred batting_order), which dictates the order in which players go up to bat.  The next rule which we defined was the rule dictating the “order” of the bases: first base to second base, second base to third base, third base to home plate, and home plate to itself.  In addition to these two rules, we needed to constrain how the players interact with each other and the bases while moving around.  As such, we defined a predicate (rightToBase), which dictates that each player is only on one base at a time, and a predicate (loneBaseOwner), which dictates that each base can only have a maximum of one player attached to it in any given state.  The final and most complicated rule that we implemented was the rule specifying that players could not pass each other while moving around the bases (runInOrder). We also looked to the rulebook to determine some other types of plays (Events) that can occur beyond the basic strikeouts and hits, and defined the transitions for Balk, Hit By Pitch, Walks and others. 
Since baseball plays have continuous states and many different events can happen within each play, we were limited in modeling all of the base running rules that we had planned to model.  A solution to this limitation was attempting to model single plays.  However, there are too many events that would have to be addressed in order to truly model a single play if we were to continue using Forge.  We considered using Spin but our spec is too complex for the language to handle.  Thus, while we could model the before and after states of each play, we are unable to model a lot of the specifics that describe what happened in order to reach the resulting state.
We also wrote some test cases that both showed that general properties held and the specific plays that should be possible were and shouldn’t be possible weren’t. We also showed that Segura’s baserunning adventures was possible https://youtu.be/HZM1JcJwo9E.



